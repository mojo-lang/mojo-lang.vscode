{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Mojo",
	"scopeName": "source.mojo",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#block-comments"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#attributes"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#punctuation"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#escapes"
		},
		{
			"include": "#variables"
		},
		{
			"include": "#types"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"comment": "documentation comments",
					"name": "comment.line.documentation.mojo",
					"match": "^\\s*///.*"
				},
				{
					"comment": "following documentation comments",
					"name": "comment.line.documentation.mojo",
					"match": "^\\s*//<.*"
				},
				{
					"comment": "line comments",
					"name": "comment.line.double-slash.mojo",
					"match": "\\s*//.*"
				}
			]
		},
		"block-comments": {
			"patterns": [
				{
					"comment": "empty block comments",
					"name": "comment.block.mojo",
					"match": "/\\*\\*/"
				},
				{
					"comment": "block comments",
					"name": "comment.block.mojo",
					"begin": "/\\*(?!\\*)",
					"end": "\\*/",
					"patterns": [
						{
							"include": "#block-comments"
						}
					]
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"comment": "constant declarations",
					"match": "\\b(const)\\s+([a-z0-9_]+)\\b",
					"captures": {
						"1": {
							"name": "storage.type.mojo"
						},
						"2": {
							"name": "constant.other.mojo"
						}
					}
				},
				{
					"comment": "decimal integers and floats",
					"name": "constant.numeric.decimal.mojo",
					"match": "\\b\\d[\\d_]*(\\.?)[\\d_]*(?:(E)([+-])([\\d_]+))?(f32|f64|i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
					"captures": {
						"1": {
							"name": "punctuation.separator.dot.decimal.mojo"
						},
						"2": {
							"name": "keyword.operator.exponent.mojo"
						},
						"3": {
							"name": "keyword.operator.exponent.sign.mojo"
						},
						"4": {
							"name": "constant.numeric.decimal.exponent.mantissa.mojo"
						},
						"5": {
							"name": "entity.name.type.numeric.mojo"
						}
					}
				},
				{
					"comment": "hexadecimal integers",
					"name": "constant.numeric.hex.mojo",
					"match": "\\b0x[\\da-fA-F_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
					"captures": {
						"1": {
							"name": "entity.name.type.numeric.mojo"
						}
					}
				},
				{
					"comment": "octal integers",
					"name": "constant.numeric.oct.mojo",
					"match": "\\b0o[0-7_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
					"captures": {
						"1": {
							"name": "entity.name.type.numeric.mojo"
						}
					}
				},
				{
					"comment": "binary integers",
					"name": "constant.numeric.bin.mojo",
					"match": "\\b0b[01_]+(i128|i16|i32|i64|i8|isize|u128|u16|u32|u64|u8|usize)?\\b",
					"captures": {
						"1": {
							"name": "entity.name.type.numeric.mojo"
						}
					}
				},
				{
					"comment": "booleans",
					"name": "constant.language.bool.mojo",
					"match": "\\b(true|false)\\b"
				}
			]
		},
		"attributes": {
			"patterns": [
				{
					"comment": "attributes",
					"name": "meta.attribute.mojo",
					"begin": "(@)([a-z0-9_]+)(\\()",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.attribute.mojo"
						},
						"2": {
							"name": "entity.other.attribute-name.mojo"
						},
						"3": {
							"name": "punctuation.brackets.attribute.mojo"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.brackets.attribute.mojo"
						}
					},
					"patterns": [
					]
				},{
					"comment": "attributes without arguments",
					"name": "meta.attribute.mojo",
					"match": "(@)([a-z0-9_]+)",
					"captures": {
						"1": {
							"name": "punctuation.definition.attribute.mojo"
						},
						"2": {
							"name": "entity.other.attribute-name.mojo"
						}
					}
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"comment": "control flow keywords",
					"name": "keyword.control.mojo",
					"match": "\\b(break|continue|do|else|for|if|match|return|while)\\b"
				},
				{
					"comment": "storage keywords",
					"name": "keyword.other.mojo storage.type.mojo",
					"match": "\\b(var)\\b"
				},
				{
					"comment": "const keyword",
					"name": "storage.modifier.mojo",
					"match": "\\b(const)\\b"
				},
				{
					"comment": "type keyword",
					"name": "keyword.declaration.type.mojo storage.type.mojo keyword.declaration.struct.mojo",
					"match": "\\b(type)\\b"
				},
				{
					"comment": "enum keyword",
					"name": "keyword.declaration.enum.mojo storage.type.mojo",
					"match": "\\b(enum)\\b"
				},
				{
					"comment": "trait keyword",
					"name": "keyword.declaration.trait.mojo storage.type.mojo",
					"match": "\\b(interface)\\b"
				},
				{
					"comment": "struct keyword",
					"name": "keyword.declaration.struct.mojo storage.type.mojo",
					"match": "\\b(struct)\\b"
				},
				{
					"comment": "func",
					"name": "keyword.other.function.mojo storage.type.function.mojo",
					"match": "\\bfunc\\b"
				},
				{
					"comment": "logical operators",
					"name": "keyword.operator.logical.mojo",
					"match": "(\\^|\\||\\|\\||&&|<<|>>|!)(?!=)"
				},
				{
					"comment": "assignment operators",
					"name": "keyword.operator.assignment.mojo",
					"match": "(\\+=|-=|\\*=|/=|%=|\\^=|&=|\\|=|<<=|>>=)"
				},
				{
					"comment": "single equal",
					"name": "keyword.operator.assignment.equal.mojo",
					"match": "(?<![<>])=(?!=|>)"
				},
				{
					"comment": "comparison operators",
					"name": "keyword.operator.comparison.mojo",
					"match": "(=(=)?(?!>)|!=|<=|(?<!=)>=)"
				},
				{
					"comment": "math operators",
					"name": "keyword.operator.math.mojo",
					"match": "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?!/))"
				},
				{
					"comment": "less than, greater than (special case)",
					"match": "(?:\\b|(?:(\\))|(\\])|(\\})))[ \\t]+([<>])[ \\t]+(?:\\b|(?:(\\()|(\\[)|(\\{)))",
					"captures": {
						"1": {
							"name": "punctuation.brackets.round.mojo"
						},
						"2": {
							"name": "punctuation.brackets.square.mojo"
						},
						"3": {
							"name": "punctuation.brackets.curly.mojo"
						},
						"4": {
							"name": "keyword.operator.comparison.mojo"
						},
						"5": {
							"name": "punctuation.brackets.round.mojo"
						},
						"6": {
							"name": "punctuation.brackets.square.mojo"
						},
						"7": {
							"name": "punctuation.brackets.curly.mojo"
						}
					}
				},
				{
					"comment": "dot access",
					"name": "keyword.operator.access.dot.mojo",
					"match": "\\.(?!\\.)"
				},
				{
					"comment": "ranges, range patterns",
					"name": "keyword.operator.range.mojo",
					"match": "\\.{2}(=|\\.)?"
				},
				{
					"comment": "colon",
					"name": "keyword.operator.key-value.mojo",
					"match": ":(?!:)"
				},
				{
					"comment": "dashrocket, skinny arrow",
					"name": "keyword.operator.arrow.skinny.mojo",
					"match": "->"
				},
				{
					"comment": "hashrocket, fat arrow",
					"name": "keyword.operator.arrow.fat.mojo",
					"match": "=>"
				},
				{
					"comment": "dollar macros",
					"name": "keyword.operator.macro.dollar.mojo",
					"match": "\\$"
				},
				{
					"comment": "question mark operator, questionably sized, macro kleene matcher",
					"name": "keyword.operator.question.mojo",
					"match": "\\?"
				}
			]
		},
		"punctuation": {
			"patterns": [
				{
					"comment": "comma",
					"name": "punctuation.comma.mojo",
					"match": ","
				},
				{
					"comment": "curly braces",
					"name": "punctuation.brackets.curly.mojo",
					"match": "[{}]"
				},
				{
					"comment": "parentheses, round brackets",
					"name": "punctuation.brackets.round.mojo",
					"match": "[()]"
				},
				{
					"comment": "semicolon",
					"name": "punctuation.semi.mojo",
					"match": ";"
				},
				{
					"comment": "square brackets",
					"name": "punctuation.brackets.square.mojo",
					"match": "[\\[\\]]"
				},
				{
					"comment": "angle brackets",
					"name": "punctuation.brackets.angle.mojo",
					"match": "(?<!=)[<>]"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"comment": "double-quoted strings and byte strings",
					"name": "string.quoted.double.mojo",
					"begin": "(b?)(\")",
					"beginCaptures": {
						"1": {
							"name": "string.quoted.byte.raw.mojo"
						},
						"2": {
							"name": "punctuation.definition.string.mojo"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.mojo"
						}
					},
					"patterns": [
						{
							"include": "#escapes"
						},
						{
							"include": "#interpolations"
						}
					]
				},
				{
					"comment": "double-quoted raw strings and raw byte strings",
					"name": "string.quoted.double.mojo",
					"begin": "(b?r)(#*)(\")",
					"beginCaptures": {
						"1": {
							"name": "string.quoted.byte.raw.mojo"
						},
						"2": {
							"name": "punctuation.definition.string.raw.mojo"
						},
						"3": {
							"name": "punctuation.definition.string.mojo"
						}
					},
					"end": "(\")(\\2)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.mojo"
						},
						"2": {
							"name": "punctuation.definition.string.raw.mojo"
						}
					}
				},
				{
					"comment": "characters and bytes",
					"name": "string.quoted.single.char.mojo",
					"begin": "(b)?(')",
					"beginCaptures": {
						"1": {
							"name": "string.quoted.byte.raw.mojo"
						},
						"2": {
							"name": "punctuation.definition.char.mojo"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.char.mojo"
						}
					},
					"patterns": [
						{
							"include": "#escapes"
						}
					]
				}
			]
		},
		"escapes": {
			"comment": "escapes: ASCII, byte, Unicode, quote, regex",
			"name": "constant.character.escape.mojo",
			"match": "(\\\\)(?:(?:(x[0-7][0-7a-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
			"captures": {
				"1": {
					"name": "constant.character.escape.backslash.mojo"
				},
				"2": {
					"name": "constant.character.escape.bit.mojo"
				},
				"3": {
					"name": "constant.character.escape.unicode.mojo"
				},
				"4": {
					"name": "constant.character.escape.unicode.punctuation.mojo"
				},
				"5": {
					"name": "constant.character.escape.unicode.punctuation.mojo"
				}
			}
		},
		"interpolations": {
			"comment": "curly brace interpolations",
			"name": "meta.interpolation.mojo",
			"match": "({)[^\"{}]*(})",
			"captures": {
				"1": {
					"name": "punctuation.definition.interpolation.mojo"
				},
				"2": {
					"name": "punctuation.definition.interpolation.mojo"
				}
			}
		},
		"variables": {
			"patterns": [
				{
					"comment": "variables",
					"name": "variable.other.mojo",
					"match": "\\b[a-z0-9_]+\\b"
				}
			]
		},
		"types": {
			"patterns": [
				{
					"comment": "numeric types",
					"match": "(Float|Double|Float32|Float64|Int128|Int16|Int32|Int64|Int8|Size|UInt128|UInt16|UInt32|UInt64|UInt8)\\b",
					"captures": {
						"1": {
							"name": "entity.name.type.numeric.mojo"
						}
					}
				},
				{
					"comment": "parameterized types",
					"begin": "\\b([A-Z][A-Za-z0-9]*)(<)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.mojo"
						},
						"2": {
							"name": "punctuation.brackets.angle.mojo"
						}
					},
					"end": ">",
					"endCaptures": {
						"0": {
							"name": "punctuation.brackets.angle.mojo"
						}
					},
					"patterns": [
						{
							"include": "#block-comments"
						},
						{
							"include": "#comments"
						},
						{
							"include": "#keywords"
						},
						{
							"include": "#lifetimes"
						},
						{
							"include": "#punctuation"
						},
						{
							"include": "#types"
						},
						{
							"include": "#variables"
						}
					]
				},
				{
					"comment": "primitive types",
					"name": "entity.name.type.primitive.mojo",
					"match": "\\b(Bool|Char|String|Bytes)\\b"
				},
				{
					"comment": "interface declarations",
					"match": "\\b(interface)\\s+([A-Z][A-Za-z0-9]*)\\b",
					"captures": {
						"1": {
							"name": "keyword.declaration.interface.mojo storage.type.mojo"
						},
						"2": {
							"name": "entity.name.type.interface.mojo"
						}
					}
				},
				{
					"comment": "struct declarations",
					"match": "\\b(type)\\s+([A-Z][A-Za-z0-9]*)\\b",
					"captures": {
						"1": {
							"name": "keyword.declaration.struct.mojo storage.type.mojo"
						},
						"2": {
							"name": "entity.name.type.struct.mojo"
						}
					}
				},
				{
					"comment": "enum declarations",
					"match": "\\b(enum)\\s+([A-Z][A-Za-z0-9_]*)\\b",
					"captures": {
						"1": {
							"name": "keyword.declaration.enum.mojo storage.type.mojo"
						},
						"2": {
							"name": "entity.name.type.enum.mojo"
						}
					}
				},
				{
					"comment": "type alias declarations",
					"match": "\\b(type)\\s+([A-Z][A-Za-z0-9_]*)\\s+(=)\\s+([A-Z][A-Za-z0-9_]*)\\b",
					"captures": {
						"1": {
							"name": "keyword.declaration.type.mojo storage.type.mojo"
						},
						"2": {
							"name": "entity.name.type.declaration.mojo"
						},
						"3": {
							"name": "punctuation.equal.mojo"
						},
						"4": {
							"name": "entity.name.type.declaration.mojo"
						}
					}
				},
				{
					"comment": "types",
					"name": "entity.name.type.mojo",
					"match": "\\b[A-Z][A-Za-z0-9]*\\b(?!!)"
				}
			]
		}
	}
}